services:
  bot:
    build:
      context: .
      target: runtime
    environment:
      - GROUP_INVITER_CONFIG=/app/config/config.yaml
    expose:
      - "8000"
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    labels:
      - promtail.scrape=true
    depends_on:
      - postgres
      - promtail
      - prometheus
    restart: unless-stopped

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_DB=group_inviter
      - POSTGRES_USER=group_inviter
      - POSTGRES_PASSWORD=group_inviter
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -d group_inviter -U group_inviter
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.3
    command: -config.file=/etc/promtail/promtail.yml
    volumes:
      - ./monitoring/promtail/promtail.yml:/etc/promtail/promtail.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - promtail-positions:/tmp
    depends_on:
      - loki
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.3
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.54.1
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.6
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=false
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -e
        CONFIG_FILE=/etc/group-inviter/config.yaml
        TOKEN=$$(awk -F'"' '/bot_token:/ {print $$2; exit}' "$${CONFIG_FILE}")
        CHAT=$$(awk -F': ' '/admin_chat_id:/ {print $$2; exit}' "$${CONFIG_FILE}")
        TEMPLATE=/etc/grafana/provisioning/alerting/contact-points.yaml.tmpl
        OUTPUT=/etc/grafana/provisioning/alerting/contact-points.yaml
        sed "s/__BOT_TOKEN__/$$TOKEN/g; s/__CHAT_ID__/$$CHAT/g" "$${TEMPLATE}" > "$${OUTPUT}"
        exec /run.sh
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./config/config.yaml:/etc/group-inviter/config.yaml:ro
    depends_on:
      - loki
      - prometheus
    restart: unless-stopped

volumes:
  grafana-data:
  loki-data:
  promtail-positions:
  prometheus-data:
  postgres-data:
